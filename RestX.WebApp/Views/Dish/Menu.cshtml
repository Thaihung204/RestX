@model RestX.WebApp.Models.ViewModels.MenuViewModel
<link rel="stylesheet" href="~/css/index.css" />

<style>
    .menu-category-bar {
        display: flex;
        overflow-x: auto;
        border-bottom: 1.5px solid #f2f2f2;
        background: #fff;
        position: sticky;
        top: 0;
        z-index: 10;
        padding: 0 8px;
        scrollbar-width: none;
    }

    .menu-category-bar::-webkit-scrollbar {
        display: none;
    }

    .menu-category-item {
        padding: 14px 16px 10px 16px;
        font-weight: 500;
        font-size: 1.07rem;
        color: #888;
        cursor: pointer;
        border: none;
        background: none;
        outline: none;
        border-bottom: 2.5px solid transparent;
        transition: color 0.2s, border-color 0.2s;
        white-space: nowrap;
        margin-right: 2px;
    }

    .menu-category-item.active {
        color: #ff9800;
        border-bottom: 2.5px solid #ff9800;
        background: none;
    }

    .menu-category-item:focus {
        outline: none;
    }

    .menu-section {
        margin: 0 0 24px 0;
        padding: 0 12px;
    }

    .menu-section-title {
        font-weight: 600;
        font-size: 1.09rem;
        margin: 18px 0 10px 0;
        color: #222;
        letter-spacing: 0.5px;
    }

    .menu-dish-card {
        display: flex;
        align-items: center;
        background: #fff;
        border-radius: 14px;
        box-shadow: 0 2px 8px #f3f3f3;
        margin-bottom: 14px;
        padding: 10px 12px;
        transition: box-shadow 0.18s;
    }

    .menu-dish-card:active {
        box-shadow: 0 2px 12px #e0e0e0;
    }

    .menu-dish-img {
        width: 54px;
        height: 54px;
        border-radius: 12px;
        object-fit: cover;
        margin-right: 14px;
        border: 1px solid #f1f1f1;
        background: #fafafa;
    }

    .menu-dish-info {
        flex: 1;
        min-width: 0;
    }

    .menu-dish-name {
        font-size: 1.05rem;
        font-weight: 500;
        color: #222;
        margin-bottom: 2px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .menu-dish-desc {
        font-size: 0.95rem;
        color: #888;
        margin-bottom: 2px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .menu-dish-price {
        color: #ff9800;
        font-weight: 500;
        font-size: 1.01rem;
        margin-top: 2px;
    }

    .menu-dish-add {
        margin-left: 10px;
        color: #ff9800;
        font-size: 1.7rem;
        cursor: pointer;
        border: none;
        background: none;
        outline: none;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        transition: background 0.15s;
    }

    .menu-dish-add:active {
        background: #fff3e0;
        color: #d17a00;
    }
</style>

<div class="container-mobile">
    <!-- Search bar and home icon -->
    <div style="display:flex;align-items:center;padding:12px 8px 0 8px;">
        <a href="/Home/Index/550E8400-E29B-41D4-A716-446655440040/1" style="font-size:1.3rem;color:#ff9800;margin-right:8px;display:inline-block;text-decoration:none;">🏠</a>
        <input type="text" placeholder="Bạn muốn tìm món gì ?" style="flex:1;border:none;background:#f7f7f7;border-radius:8px;padding:8px 12px;font-size:1rem;outline:none;" />
    </div>

    <!-- Category Bar -->
    <div class="menu-category-bar" id="categoryBar">
        @for (int i = 0; i < Model.Categories.Count; i++)
        {
            <button class="menu-category-item @(i == 0 ? "active" : "")"
                    data-category="@Model.Categories[i].Id"
                    onclick="scrollToCategory(@Model.Categories[i].Id)">
                @Model.Categories[i].CategoryName
            </button>
        }
        <button class="menu-category-item" style="min-width:32px;padding:0 8px;background:none;border:none;pointer-events:none;">&#9660;</button>
    </div>

    <!-- Dishes by Category -->
    <div id="menuSections">
        @foreach (var category in Model.Categories)
        {
            <div class="menu-section" id="category-@category.Id">
                <div class="menu-section-title">@category.CategoryName</div>
                @foreach (var dish in category.Dishes)
                {
                    <div class="menu-dish-card">
                        <img class="menu-dish-img" src="@dish.ImageUrl" alt="@dish.Name" />
                        <div class="menu-dish-info">
                            <div class="menu-dish-name">@dish.Name</div>
                            @if (!string.IsNullOrEmpty(dish.Description))
                            {
                                <div class="menu-dish-desc">@dish.Description</div>
                            }
                            <div class="menu-dish-price">@dish.Price.ToString("N0") đ</div>
                        </div>
                        <button class="menu-dish-add" title="Add">
                            <span>+</span>
                        </button>
                    </div>
                }
            </div>
        }
    </div>
</div>

<script>
    const categoryBar = document.getElementById('categoryBar');
    const categoryButtons = categoryBar.querySelectorAll('.menu-category-item');
    const sections = Array.from(document.querySelectorAll('.menu-section'));

    function getBarHeight() {
        return categoryBar.offsetHeight || 0;
    }

    function scrollToCategory(categoryId) {
        const section = document.getElementById('category-' + categoryId);
        if (section) {
            const y = section.getBoundingClientRect().top + window.pageYOffset - getBarHeight() - 2;
            window.scrollTo({ top: y, behavior: 'smooth' });
        }
        const btn = categoryBar.querySelector('.menu-category-item[data-category="' + categoryId + '"]');
        if (btn) {
            btn.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
        }
    }

    window.addEventListener('scroll', function () {
        let activeIdx = 0;
        const barHeight = getBarHeight();
        let minDiff = Number.POSITIVE_INFINITY;
        for (let i = 0; i < sections.length; i++) {
            const rect = sections[i].getBoundingClientRect();
            const diff = Math.abs(rect.top - barHeight);
            if (rect.top - barHeight <= 8 && diff < minDiff) {
                minDiff = diff;
                activeIdx = i;
            }
        }
        categoryButtons.forEach((btn, idx) => {
            btn.classList.toggle('active', idx === activeIdx);
        });
        const activeBtn = categoryButtons[activeIdx];
        if (activeBtn) {
            activeBtn.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
        }
    });
</script>
