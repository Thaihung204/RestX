@model RestX.WebApp.Models.ViewModels.MenuViewModel
@{
    ViewData["Title"] = "Menu";
    Layout = "_StaffLayout";
}

<div class="menu-container">
    <div class="page-header">
        <h1>Menu & Status</h1>
    </div>

    <div class="search-bar-staff">
        <input type="text" id="searchInput" placeholder="Search dishes..." />
    </div>

    @foreach (var category in Model.Categories)
    {
        <div class="menu-section-staff" data-category="@category.Id">
            <div class="menu-section-title-staff">@category.CategoryName</div>
            @foreach (var dish in category.Dishes)
            {
                <div class="menu-dish-card-staff" data-dish-id="@dish.Id" data-dish-name="@dish.Name.ToLower()">
                    <img class="menu-dish-img-staff" src="@(dish.ImageUrl ?? "/images/no-image.png")" alt="@dish.Name" />
                    <div class="menu-dish-info-staff">
                        <div class="menu-dish-name-staff">@dish.Name</div>
                        @if (!string.IsNullOrEmpty(dish.Description))
                        {
                            <div class="menu-dish-desc-staff">@dish.Description</div>
                        }
                        <div class="menu-dish-price-staff">@dish.Price.ToString("N0") đ</div>
                    </div>
                    <div class="availability-toggle @(dish.IsActive == false ? "off" : "")" data-dish-id="@dish.Id">
                        <span>@(dish.IsActive == false ? "Out of Stock" : "Available")</span>
                        <i class="fa-solid @(dish.IsActive == false ? "fa-toggle-off" : "fa-toggle-on")"></i>
                    </div>
                </div>
            }
        </div>
    }
</div>

<script>
    // Search functionality
    document.getElementById('searchInput').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const dishCards = document.querySelectorAll('.menu-dish-card-staff');
        const sections = document.querySelectorAll('.menu-section-staff');
        
        dishCards.forEach(card => {
            const dishName = card.dataset.dishName;
            const matches = dishName.includes(searchTerm);
            card.style.display = matches ? 'flex' : 'none';
        });
        
        // Hide sections with no visible dishes
        sections.forEach(section => {
            const visibleDishes = section.querySelectorAll('.menu-dish-card-staff[style="display: flex"], .menu-dish-card-staff:not([style*="display: none"])');
            const hasVisibleDishes = Array.from(visibleDishes).some(dish => 
                !dish.style.display || dish.style.display === 'flex'
            );
            section.style.display = hasVisibleDishes ? 'block' : 'none';
        });
    });

    // Availability toggle functionality
    document.querySelectorAll('.availability-toggle').forEach(toggle => {
        toggle.addEventListener('click', async () => {
            const dishId = toggle.dataset.dishId;
            const isCurrentlyActive = !toggle.classList.contains('off');
            
            try {
                console.log('Updating dish availability:', { dishId, isActive: !isCurrentlyActive });
                
                // Call API to update dish availability
                const response = await fetch('/Staff/UpdateDishAvailability', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        dishId: parseInt(dishId),
                        isActive: !isCurrentlyActive
                    })
                });

                console.log('Response status:', response.status);
                const result = await response.json();
                console.log('Response result:', result);

                if (result.success) {
                    // Update UI
                    toggle.classList.toggle('off');
                    const icon = toggle.querySelector('i');
                    const label = toggle.querySelector('span');
                    
                    if (toggle.classList.contains('off')) {
                        icon.className = 'fa-solid fa-toggle-off';
                        label.textContent = 'Out of Stock';
                    } else {
                        icon.className = 'fa-solid fa-toggle-on';
                        label.textContent = 'Available';
                    }
                } else {
                    console.error('Failed to update dish availability:', result.message);
                    alert('Failed to update dish availability: ' + (result.message || 'Please try again.'));
                }
            } catch (error) {
                console.error('Error updating dish availability:', error);
                alert('An error occurred. Please try again.');
            }
        });
    });
</script>

<style>
    .menu-dish-desc-staff {
        font-size: 0.9rem;
        color: #666;
        margin: 2px 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .menu-dish-card-staff[style*="display: none"] {
        display: none !important;
    }
    
    .availability-toggle {
        cursor: pointer;
        transition: color 0.2s ease;
        user-select: none;
    }
    
    .availability-toggle:hover {
        opacity: 0.8;
    }
    
    .search-bar-staff input {
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }
    
    .search-bar-staff input:focus {
        border-color: #ff9800;
        box-shadow: 0 0 0 2px rgba(255, 152, 0, 0.2);
    }
</style>
