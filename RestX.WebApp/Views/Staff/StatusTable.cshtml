@model IEnumerable<RestX.WebApp.Models.ViewModels.TableStatusViewModel>
@{
    ViewData["Title"] = "Table Status";
    Layout = "_StaffLayout";
}

<div class="page-header">
    <h1>Table Status</h1>
</div>

<div class="table-grid">
    @foreach (var table in Model)
    {
        <div id="table-@table.Id" class="table-card @GetTableStatusClass(table.TableStatus.Id)" data-table-id="@table.Id">
            <div class="table-card-number">@table.TableNumber</div>
            <div class="table-card-status">@table.TableStatus.Name</div>
        </div>
    }
</div>

<!-- Status Selection Modal -->
<div id="statusModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
        <h3 id="modalTableName">Select status for Table X</h3>
        <div class="status-options">
            <button class="status-option" data-status-id="1">Available</button>
            <button class="status-option" data-status-id="2">Occupied</button>
            @* <button class="status-option" data-status-id="3">Reserved</button> *@
            <button class="status-option" data-status-id="4">Cleaning</button>
        </div>
        <button id="closeModalBtn" class="btn-cancel">Cancel</button>
    </div>
</div>

@functions {
    string GetTableStatusClass(int status)
    {
        return status switch
        {
            2 => "table-status-occupied",
            1 => "table-status-available",
            4 => "table-status-cleaning",
            3 => "table-status-reserved",
            _ => ""
        };
    }
}

@section Scripts {
    <script src="~/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Use a global variable to prevent multiple SignalR connections
        window.tableStatusManager = window.tableStatusManager || {};

        document.addEventListener("DOMContentLoaded", function () {
            console.log("StatusTable page loaded, initializing SignalR...");
            
            // Don't recreate connection if it already exists and is connected
            if (!window.tableStatusManager.connection || window.tableStatusManager.connection.state !== signalR.HubConnectionState.Connected) {
                console.log("Creating new SignalR connection...");
                window.tableStatusManager.connection = new signalR.HubConnectionBuilder()
                    .withUrl("/tableStatusHub")
                    .configureLogging(signalR.LogLevel.Debug)
                    .build();

                // SignalR connection logic
                async function startSignalR() {
                    try {
                        await window.tableStatusManager.connection.start();
                        console.log("SignalR Connected successfully!");
                    } catch (err) {
                        console.error("SignalR connection error:", err);
                        setTimeout(startSignalR, 5000);
                    }
                }

                window.tableStatusManager.connection.onclose(async () => {
                    console.log("SignalR connection closed, attempting to reconnect...");
                    await startSignalR();
                });

                // Real-time update handler - Fixed property names
                window.tableStatusManager.connection.on("ReceiveTableStatusUpdate", function (updatedTable) {
                    console.log("Received SignalR update:", updatedTable);
                    const tableCard = document.getElementById("table-" + updatedTable.id);
                    console.log("Looking for table card with ID:", "table-" + updatedTable.id);
                    
                    if (tableCard) {
                        console.log("Found table card, updating...");
                        const statusDiv = tableCard.querySelector(".table-card-status");
                        statusDiv.textContent = updatedTable.tableStatus.name;
                        
                        // Remove all status classes and add new one
                        tableCard.className = 'table-card';
                        const newStatusClass = getTableStatusClassJs(updatedTable.tableStatus.id);
                        if (newStatusClass) {
                            tableCard.classList.add(newStatusClass);
                        }
                        console.log("Table card updated successfully");
                    } else {
                        console.warn("Table card not found for ID:", "table-" + updatedTable.id);
                    }
                });

                startSignalR();
            } else {
                console.log("Using existing SignalR connection");
            }

            let activeTableId = null;

            function getTableStatusClassJs(status) {
                switch (status) {
                    case 2: return "table-status-occupied";
                    case 1: return "table-status-available";
                    case 4: return "table-status-cleaning";
                    case 3: return "table-status-reserved";
                    default: return "";
                }
            }

            function showModal(tableId, tableNumber) {
                const statusModal = document.getElementById('statusModal');
                const modalTableName = document.getElementById('modalTableName');
                if (statusModal && modalTableName) {
                    activeTableId = tableId;
                    modalTableName.textContent = `Select status for Table ${tableNumber}`;
                    statusModal.style.display = 'flex';
                }
            }

            function hideModal() {
                const statusModal = document.getElementById('statusModal');
                if (statusModal) {
                    activeTableId = null;
                    statusModal.style.display = 'none';
                }
            }

            function attachClickListeners() {
                console.log("Attaching click listeners to table cards...");
                
                // Remove existing listeners first
                document.querySelectorAll('.table-card').forEach(card => {
                    const newCard = card.cloneNode(true);
                    card.parentNode.replaceChild(newCard, card);
                });

                // Attach new listeners
                document.querySelectorAll('.table-card').forEach(card => {
                    card.addEventListener('click', function() {
                        const tableId = this.dataset.tableId;
                        const tableNumber = this.querySelector('.table-card-number').textContent;
                        console.log("Table clicked:", tableId, tableNumber);
                        showModal(tableId, tableNumber);
                    });
                });

                // Modal event listeners
                const statusOptionsContainer = document.querySelector('.status-options');
                const closeModalBtn = document.getElementById('closeModalBtn');
                const statusModal = document.getElementById('statusModal');

                if (statusOptionsContainer) {
                    statusOptionsContainer.removeEventListener('click', window.tableStatusManager.statusClickHandler);
                    window.tableStatusManager.statusClickHandler = function(e) {
                        if (e.target.classList.contains('status-option')) {
                            const newStatusId = parseInt(e.target.dataset.statusId);
                            console.log("Status option clicked:", newStatusId, "for table:", activeTableId);
                            
                            if (activeTableId && window.tableStatusManager.connection) {
                                console.log("Sending UpdateTableStatus via SignalR...");
                                window.tableStatusManager.connection.invoke("UpdateTableStatus", parseInt(activeTableId), newStatusId)
                                    .then(() => {
                                        console.log("UpdateTableStatus sent successfully");
                                    })
                                    .catch(err => console.error("SignalR invoke error:", err));
                            }
                            hideModal();
                        }
                    };
                    statusOptionsContainer.addEventListener('click', window.tableStatusManager.statusClickHandler);
                }

                if (closeModalBtn) {
                    closeModalBtn.removeEventListener('click', hideModal);
                    closeModalBtn.addEventListener('click', hideModal);
                }

                if (statusModal) {
                    statusModal.removeEventListener('click', window.tableStatusManager.modalClickHandler);
                    window.tableStatusManager.modalClickHandler = function(e) {
                        if(e.target === statusModal) {
                            hideModal();
                        }
                    };
                    statusModal.addEventListener('click', window.tableStatusManager.modalClickHandler);
                }
                
                console.log("Click listeners attached successfully");
            }

            // Initial attachment of listeners
            attachClickListeners();

            // Re-attach listeners when content changes via SPA navigation
            const mainContent = document.getElementById('main-content');
            if (mainContent) {
                // Disconnect existing observer if it exists
                if (window.tableStatusManager.observer) {
                    window.tableStatusManager.observer.disconnect();
                }

                window.tableStatusManager.observer = new MutationObserver((mutations) => {
                    for (let mutation of mutations) {
                        if (mutation.addedNodes.length) {
                            // Check if the table grid was added
                            const addedElements = Array.from(mutation.addedNodes).filter(node => node.nodeType === Node.ELEMENT_NODE);
                            for (let element of addedElements) {
                                if (element.querySelector && element.querySelector('.table-grid')) {
                                    console.log("Table grid detected, re-attaching listeners");
                                    setTimeout(attachClickListeners, 100); // Small delay to ensure DOM is ready
                                    return;
                                }
                            }
                        }
                    }
                });
                
                window.tableStatusManager.observer.observe(mainContent, { 
                    childList: true, 
                    subtree: true 
                });
            }
        });
    </script>
}
